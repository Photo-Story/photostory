#!/usr/bin/env python

# Photostory 1.0
# Joel Auterson <joel.auterson@googlemail.com>
# http://launchpad.net/photostory

import time, os, sys, glib, glob, shutil, gtk, pygtk, pygst
pygst.require("0.10")
import gst

DB = os.path.expanduser('~/.photostory/photos/')

class Main:
    def __init__(self):
        pipeline = None
        xvimagesink = None
        movie = None
        self.movPath = None
        self.adj = gtk.Adjustment(5, 1, 10, 1)
        self.pic=None
        self.dateString = None
        self.todayDate = None

        # If the `~/.photostory/photos` directory doesn't exist, create it:
        if not os.path.exists(os.path.expanduser('~/.photostory/photos')):
            os.makedirs(os.path.expanduser('~/.photostory/photos'))

        def chooseDay(cal):
            year, month, day = cal.get_date()
            self.dateString = '{0:04d}-{1:02d}-{2:02d}'.format(year, month+1, day)
            setPic(self.dateString)

        def closedown(win):
            gtk.main_quit()

        def about(aboutBut):
            dAbout = gtk.AboutDialog()
            dAbout.set_name("Photostory")
            dAbout.set_comments("Photostory is an application that lets you tell the story of your life in photos, by taking a snapshot of you each day. You can then make these into a video to share with friends or on the internet.")
            dAbout.set_artists(("Josh Brown", ""))
            dAbout.set_authors(("Joel Auterson", "David Turner", "Josh Brown"))
            dAbout.set_website("http://launchpad.net/photostory")
            response = dAbout.run()
            if response == -6:
                dAbout.destroy()

        def movify(filmBut):
            def movPick(movFileButton):
                movPicker = gtk.FileChooserDialog(title="Choose a save location", parent=movDia, action=gtk.FILE_CHOOSER_ACTION_SAVE, buttons=(("Save Here", -6)), backend=None)
                movRes = movPicker.run()
                if movRes == -6:
                    self.movPath = movPicker.get_filename()
                    if os.path.exists(self.movPath):
                        os.remove(self.movPath)
                    movPicker.destroy()

            def movGen(movButton):
                movDia.destroy()

                #Move images to /tmp directory
                photosList = glob.glob(os.path.expanduser("~/.photostory/photos/") + "*.png")
                photosList = sorted(photosList)
                numPhotos = len(photosList)
                photoCount = 0
                try:
                    os.makedirs('/tmp/photostory')
                except OSError:
                    pass

                while (photoCount < numPhotos):
                    theFile ='/tmp/photostory/' + str(photoCount) + ".png"
                    shutil.copy(photosList[photoCount], theFile)
                    photoCount = photoCount + 1

                #Generate video from images.
                filmPipe = gst.Pipeline("filmPipe")
                filmSrc = gst.element_factory_make("multifilesrc", "filmSrc")
                filmSrc.set_property("location", os.path.expanduser("/tmp/photostory/") + "%d.png")
                filmFilt1 = gst.element_factory_make("capsfilter", "filmFilt1")
                filmCap1 = gst.Caps("image/png,framerate=" + str(int(self.adj.get_value())) + "/1,pixel-aspect-ratio=1/1")
                filmFilt1.set_property("caps", filmCap1)
                filmPngDec = gst.element_factory_make("pngdec", "filmPngDec")
                filmff = gst.element_factory_make("ffmpegcolorspace", "filmff")
                filmFilt2 = gst.element_factory_make("capsfilter", "filmFilt2")
                filmCap2 = gst.Caps("video/x-raw-yuv")
                filmFilt2.set_property("caps", filmCap2)
                filmTheora = gst.element_factory_make("xvidenc", "filmTheora")
                filmOggmux = gst.element_factory_make("ffmux_mp4", "filmOggmux")
                filmFilesink = gst.element_factory_make("filesink", "filmFilesink")
                filmFilesink.set_property("location", self.movPath)

                filmPipe.add(filmSrc, filmFilt1, filmPngDec, filmff, filmFilt2, filmTheora, filmOggmux, filmFilesink)
                gst.element_link_many(filmSrc, filmFilt1, filmPngDec, filmff, filmFilt2, filmTheora, filmOggmux, filmFilesink)
                filmPipe.set_state(gst.STATE_PLAYING)
                time.sleep(5)
                filmBut.set_sensitive(True)
                shutil.rmtree('/tmp/photostory')

            movDia = gtk.Window(gtk.WINDOW_TOPLEVEL)
            movDia.set_title("Create Film")
            movDia.set_resizable(False)
            filmBut.set_sensitive(False)
            movVbox = gtk.VBox(homogeneous=False, spacing=2)
            movLabel = gtk.Label("Here you can create a video made up of all your photos. \n\nJust choose a save location and hit 'create'.\n\nRemember, the path must end in '.mp4'.\n")
            movFileButton = gtk.Button(label="Choose a location")
            movButton = gtk.Button(label="Create")

            #FPS Slider
            movSliderBox = gtk.HBox(homogeneous=False, spacing=3)
            movSliderLabel = gtk.Label("FPS:")
            movSlider = gtk.HScale(self.adj)
            movSlider.set_digits(0)
            movSliderBox.pack_start(movSliderLabel, expand=False)
            movSliderBox.pack_start(movSlider, expand=True)

            movDia.add(movVbox)
            movVbox.pack_start(movLabel, expand=False)
            movVbox.pack_start(movSliderBox, expand=False)
            movVbox.pack_start(movFileButton, expand=False)
            movVbox.pack_start(movButton, expand=False)
            movButton.connect("clicked", movGen)
            movFileButton.connect("clicked", movPick)
            movDia.show_all()

        def capture(takeBut):
            def takePic():
                pipeline.set_state(gst.STATE_NULL)
                stillPipe = gst.Pipeline("stillPipe")
                stillCam = gst.element_factory_make("v4l2src", "stillPipe")
                stillFilt = gst.element_factory_make("capsfilter", "stillFilt")
                stillCap = gst.Caps("video/x-raw-yuv,width=640,height=480")
                stillFilt.set_property("caps", stillCap)
                ffmpegcolorspace = gst.element_factory_make("ffmpegcolorspace", "ffmpegcolorspace")
                pngEnc = gst.element_factory_make("pngenc", "pngenc")
                filesink = gst.element_factory_make("filesink", "filesink")
                filesink.set_property("location", DB + self.dateString + ".png")
                stillPipe.add(stillCam, stillFilt, ffmpegcolorspace, pngEnc, filesink)
                gst.element_link_many(stillCam, stillFilt, ffmpegcolorspace, pngEnc, filesink)
                stillPipe.set_state(gst.STATE_PLAYING)
                time.sleep(1)
                stillPipe.set_state(gst.STATE_NULL)
                xvimagesink.set_xwindow_id(movie.window.xid)
                pipeline.set_state(gst.STATE_PLAYING)
                setPic(self.todayDate)

            def countdown(n = 3):
                self.pic.set_markup("<span size='54000'>" + str(n) + "</span>")
                if n == 0: takePic()
                else: glib.timeout_add(1000, countdown, n-1)

            countdown()

        def deletePic(deleteBut):
            picPath = DB + self.dateString + ".png"
            if os.path.exists(picPath):
                os.remove(picPath)
                setPic(self.dateString)

        def setPic(date):
            if self.pic != None:
                vbox1.remove(self.pic)
                vbox1.remove(hbox2)
            picPath = DB + str(date) + ".png"
            if os.path.exists(picPath):
                self.pic = gtk.Image()
                self.pic.set_from_file(picPath)
                takeBut.set_label("Photo taken for this day.")
                takeBut.set_sensitive(False)
                deleteBut.set_sensitive(True)
            else: 
                if date == self.todayDate:
                    takeBut.set_label("Take today's photo")
                    takeBut.set_sensitive(True)
                else:
                    takeBut.set_label("Take today's photo")
                    takeBut.set_sensitive(False)
                self.pic = gtk.Label()
                self.pic.set_justify(gtk.JUSTIFY_CENTER)
                self.pic.set_markup("<span size='54000'>No Photo\nToday</span>");
                self.pic.set_size_request(640, 480)
                deleteBut.set_sensitive(False)
            vbox1.pack_start(self.pic)
            vbox1.pack_start(hbox2)
            vbox1.show_all()

        #Interface
        self.win = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.win.connect("destroy", closedown)
        self.win.set_default_size(900, 600)
        self.win.set_resizable(False)
        self.win.set_title("Photostory")
        if os.path.exists(sys.path[0] + "/photostory.svg"): #For Development
            self.win.set_icon_from_file(sys.path[0] + "/photostory.svg")
        elif os.path.exists("/usr/share/icons/hicolor/scalable/apps/photostory.svg"): #For the packaged program
            self.win.set_icon_from_file("/usr/share/icons/hicolor/scalable/apps/photostory.svg")
        movie = gtk.DrawingArea()
        movie.set_size_request(320, 240)
        hbox = gtk.HBox(homogeneous=False, spacing=3)
        vbox1 = gtk.VBox(homogeneous=False)
        vbox2 = gtk.VBox(homogeneous = False)   
        filmBut = gtk.Button(label="Create Film")
        filmBut.connect("clicked", movify)
        deleteBut = gtk.Button(label="Delete Photo")
        deleteBut.connect("clicked", deletePic)
#        shareBut = gtk.Button(label="Share Video")
        hbox2 = gtk.HBox(homogeneous=True)
        aboutBut = gtk.Button(label="About")
        aboutBut.connect("clicked", about)

        cal = gtk.Calendar()
        cal.connect("day-selected", chooseDay)
        year, month, day = self.todayDateTuple = cal.get_date()
        self.dateString = '{0:04d}-{1:02d}-{2:02d}'.format(year, month+1, day)
        self.todayDate = self.dateString
        takeBut = gtk.Button(label="Take today's photo")
        takeBut.connect("clicked", capture)
        setPic(self.todayDate)

        self.win.add(hbox)
        hbox.pack_start(vbox1, expand=False)
        hbox2.pack_start(filmBut, expand=False)
        hbox2.pack_start(deleteBut, expand=False)
#        hbox2.pack_start(shareBut)
        hbox2.pack_start(aboutBut)
        vbox2.pack_start(movie)
        vbox2.pack_start(cal, expand=False, padding=25)
        vbox2.pack_start(takeBut, expand=False)
        hbox.pack_start(vbox2)

        self.win.show_all()

        #Pipeline stuff - feed
        pipeline = gst.Pipeline("mypipeline")

        camera = gst.element_factory_make("v4l2src", "camera")
        camera.set_property("device", "/dev/video0")

        caps = gst.Caps("video/x-raw-yuv,width=640,height=480,framerate=30/1")
        filt = gst.element_factory_make("capsfilter", "filter")
        filt.set_property("caps", caps)

        xvimagesink = gst.element_factory_make("xvimagesink", "sink")

        pipeline.add(camera, filt, xvimagesink)
        gst.element_link_many(camera, filt, xvimagesink)

        xvimagesink.set_xwindow_id(movie.window.xid)

        pipeline.set_state(gst.STATE_PLAYING)

start=Main()
gtk.main()
