#!/usr/bin/env python2

# Photostory 1.0
# Joel Auterson <joel.auterson@googlemail.com>
# http://launchpad.net/photostory

import time, datetime, os, sys, glib, glob, shutil, gtk, pygtk, pygst
pygst.require("0.10")
import gst
import gettext
import locale
locale.setlocale(locale.LC_ALL, '')
gettext.install('photostory', unicode=True)
import locale

DB = os.path.expanduser('~/.photostory/photos/')

class Main:
    def __init__(self):
        self.cameraStatus = gst.STATE_CHANGE_FAILURE
        self.pipeline = None
        self.xvimagesink = None
        self.camera = None
        self.movie = None
        self.movPath = None
        self.adj = gtk.Adjustment(5, 1, 10, 1)
        self.pic=None
        self.dateString = None
        self.todayDate = None

        # If the `~/.photostory/photos` directory doesn't exist, create it:
        if not os.path.exists(os.path.expanduser('~/.photostory/photos')):
            os.makedirs(os.path.expanduser('~/.photostory/photos'))

        def chooseDay(cal):
            year, month, day = cal.get_date()
            self.dateString = '{0:04d}-{1:02d}-{2:02d}'.format(year, month+1, day)
            setPic(self.dateString)

        def closedown(win):
            gtk.main_quit()

        def about(aboutBut):
            dAbout = gtk.AboutDialog()
            dAbout.set_name("Photostory")
            dAbout.set_comments(_("Photostory is an application that lets you tell the story of your life in photos, by taking a snapshot of you each day. You can then make these into a video to share with friends or on the internet."))
            dAbout.set_artists(("Josh Brown", ""))
            dAbout.set_authors(("Joel Auterson", "David Turner", "Josh Brown"))
            dAbout.set_website("http://launchpad.net/photostory")
            response = dAbout.run()
            if response == -6:
                dAbout.destroy()

        def movify(filmBut):
            def movPick(movFileButton):
                movPicker = gtk.FileChooserDialog(title=_("Choose a save location"), parent=movDia, action=gtk.FILE_CHOOSER_ACTION_SAVE, buttons=((_("Save Here"), -6)), backend=None)
                movRes = movPicker.run()
                if movRes == -6:
                    self.movPath = movPicker.get_filename()
                    if os.path.exists(self.movPath):
                        os.remove(self.movPath)
                    movPicker.destroy()

            def movGen(movButton):
                movDia.destroy()

                #Move images to /tmp directory
                photosList = glob.glob(os.path.expanduser("~/.photostory/photos/") + "*.png")
                photosList = sorted(photosList)
                numPhotos = len(photosList)
                photoCount = 0
                try:
                    os.makedirs('/tmp/photostory')
                except OSError:
                    pass

                while (photoCount < numPhotos):
                    theFile ='/tmp/photostory/' + str(photoCount) + ".png"
                    shutil.copy(photosList[photoCount], theFile)
                    photoCount = photoCount + 1

                #Generate video from images.
                filmPipe = gst.Pipeline("filmPipe")
                filmSrc = gst.element_factory_make("multifilesrc", "filmSrc")
                filmSrc.set_property("location", os.path.expanduser("/tmp/photostory/") + "%d.png")
                filmFilt1 = gst.element_factory_make("capsfilter", "filmFilt1")
                filmCap1 = gst.Caps("image/png,framerate=" + str(int(self.adj.get_value())) + "/1,pixel-aspect-ratio=1/1")
                filmFilt1.set_property("caps", filmCap1)
                filmPngDec = gst.element_factory_make("pngdec", "filmPngDec")
                filmff = gst.element_factory_make("ffmpegcolorspace", "filmff")
                filmFilt2 = gst.element_factory_make("capsfilter", "filmFilt2")
                filmCap2 = gst.Caps("video/x-raw-yuv")
                filmFilt2.set_property("caps", filmCap2)
                filmTheora = gst.element_factory_make("xvidenc", "filmTheora")
                filmOggmux = gst.element_factory_make("ffmux_mp4", "filmOggmux")
                filmFilesink = gst.element_factory_make("filesink", "filmFilesink")
                filmFilesink.set_property("location", self.movPath)

                filmPipe.add(filmSrc, filmFilt1, filmPngDec, filmff, filmFilt2, filmTheora, filmOggmux, filmFilesink)
                gst.element_link_many(filmSrc, filmFilt1, filmPngDec, filmff, filmFilt2, filmTheora, filmOggmux, filmFilesink)
                filmPipe.set_state(gst.STATE_PLAYING)
                time.sleep(5)
                filmBut.set_sensitive(True)
                shutil.rmtree('/tmp/photostory')

            movDia = gtk.Window(gtk.WINDOW_TOPLEVEL)
            movDia.set_title(_("Create Film"))
            movDia.set_resizable(False)
            filmBut.set_sensitive(False)
            movVbox = gtk.VBox(homogeneous=False, spacing=2)
            movLabel = gtk.Label(_("Here you can create a video made up of all your photos. \n\nJust choose a save location and hit 'create'.\n\nRemember, the path must end in '.mp4'.\n"))
            movFileButton = gtk.Button(label=_("Choose a location"))
            movButton = gtk.Button(label=_("Create"))
            
            def updateEstimate(slider):
                photosList = glob.glob(os.path.expanduser("~/.photostory/photos/") + "*.png")
                photosList = sorted(photosList)
                numPhotos = len(photosList)
                fps = self.adj.get_value()
                seconds = (int)(numPhotos*(1/fps))
                time = str(datetime.timedelta(seconds=seconds))
                timeLabel.set_markup("Estimated Time: " + time)

            #FPS Slider
            movSliderBox = gtk.HBox(homogeneous=False, spacing=3)
            movSliderLabel = gtk.Label("FPS:")
            movSlider = gtk.HScale(self.adj)
            movSlider.connect("value-changed", updateEstimate)
            movSlider.set_digits(0)
            movSliderBox.pack_start(movSliderLabel, expand=False)
            movSliderBox.pack_start(movSlider, expand=True)
            
            timeLabel = gtk.Label()
            updateEstimate(None)
            movDia.add(movVbox)
            movVbox.pack_start(movLabel, expand=False)
            movVbox.pack_start(movSliderBox, expand=False)
            movVbox.pack_start(timeLabel, expand=False)
            movVbox.pack_start(movFileButton, expand=False)
            movVbox.pack_start(movButton, expand=False)
            movButton.connect("clicked", movGen)
            movFileButton.connect("clicked", movPick)
            movDia.show_all()

        def capture(takeBut):
            self.stillPipe = None

            def prepare():
                self.stillPipe = gst.Pipeline("stillPipe")
                stillCam = gst.element_factory_make("v4l2src", "stillPipe")
                stillFilt = gst.element_factory_make("capsfilter", "stillFilt")
                stillCap = gst.Caps("video/x-raw-yuv,width=640,height=480")
                stillFilt.set_property("caps", stillCap)
                ffmpegcolorspace = gst.element_factory_make("ffmpegcolorspace", "ffmpegcolorspace")
                pngEnc = gst.element_factory_make("pngenc", "pngenc")
                filesink = gst.element_factory_make("filesink", "filesink")
                filesink.set_property("location", DB + self.dateString + ".png")
                self.stillPipe.add(stillCam, stillFilt, ffmpegcolorspace, pngEnc, filesink)
                gst.element_link_many(stillCam, stillFilt, ffmpegcolorspace, pngEnc, filesink)
                bus = self.stillPipe.get_bus()
                bus.add_signal_watch()
                bus.connect("message", message_handler)

            def takePic():
                self.pipeline.set_state(gst.STATE_NULL)
                self.stillPipe.set_state(gst.STATE_PLAYING)

            def countdown(n = 3):
                self.pic.set_markup("<span size='54000'>" + str(n) + "</span>")
                if n == 0: takePic()
                else: glib.timeout_add(1000, countdown, n-1)

            def message_handler(bus, message):
                msgType = message.type
                if msgType == gst.MESSAGE_EOS:
                    self.stillPipe.set_state(gst.STATE_NULL)
                    self.xvimagesink.set_xwindow_id(self.movie.window.xid)
                    self.pipeline.set_state(gst.STATE_PLAYING)
                    setPic(self.todayDate)
                if msgType == gst.MESSAGE_ERROR:
                    err, debug = message.parse_error()
                    print "Error: %s" % err, debug
                if msgType == gst.MESSAGE_WARNING:
                    err, debug = message.parse_error()
                    print "Warning: %s" % err, debug
            prepare()
            countdown()

        def deletePic(deleteBut):
            picPath = DB + self.dateString + ".png"
            if os.path.exists(picPath):
                os.remove(picPath)
                setPic(self.dateString)

        def setPic(date):
            if self.pic != None:
                vbox1.remove(self.pic)
                vbox1.remove(hbox2)
            picPath = DB + str(date) + ".png"
            if os.path.exists(picPath):
                self.pic = gtk.Image()
                self.pic.set_from_file(picPath)
                takeBut.set_label(_("Photo taken for this day."))
                takeBut.set_sensitive(False)
                deleteBut.set_sensitive(True)
            else: 
                if date == self.todayDate:
                    takeBut.set_label("Take today's photo")
                    if self.cameraStatus != gst.STATE_CHANGE_FAILURE:
                        takeBut.set_sensitive(True)
                else:
                    takeBut.set_label(_("Take today's photo"))
                    takeBut.set_sensitive(False)
                self.pic = gtk.Label()
                self.pic.set_justify(gtk.JUSTIFY_CENTER)
                self.pic.set_markup(_("<span size='54000'>No Photo\nToday</span>"));
                self.pic.set_size_request(640, 480)
                deleteBut.set_sensitive(False)
            vbox1.pack_start(self.pic)
            vbox1.pack_start(hbox2)
            vbox1.show_all()
            
        def connectCamera(button):
            vbox2.remove(self.movie)
            self.movie = gtk.DrawingArea()
            self.movie.set_size_request(320, 240)
            vbox2.pack_start(self.movie)
            vbox2.reorder_child(self.movie, 0)
            #Pipeline stuff - feed
            self.pipeline = gst.Pipeline("mypipeline")

            self.camera = gst.element_factory_make("v4l2src", "camera")
            self.camera.set_property("device", "/dev/video0")

            caps = gst.Caps("video/x-raw-yuv,width=640,height=480,framerate=30/1")
            filt = gst.element_factory_make("capsfilter", "filter")
            filt.set_property("caps", caps)
            self.xvimagesink = gst.element_factory_make("xvimagesink", "sink")

            self.pipeline.add(self.camera, filt, self.xvimagesink)
            gst.element_link_many(self.camera, filt, self.xvimagesink)
            self.cameraStatus = self.pipeline.set_state(gst.STATE_PLAYING)
            
            if self.cameraStatus == gst.STATE_CHANGE_FAILURE:#Check if there actually is a camera connected
                vbox2.remove(self.movie)
                self.movie = gtk.VBox(homogeneous=False, spacing=3)
                noCameraLabel = gtk.Label()
                noCameraLabel.set_justify(gtk.JUSTIFY_CENTER)
                noCameraLabel.set_markup(_("<span size='32000'>No Camera\nConnected</span>"));
                connectBut = gtk.Button("Connect Camera")
                connectBut.connect("clicked", connectCamera)
                
                self.movie.pack_start(gtk.Label(), expand=True) #Empty Space
                self.movie.pack_start(noCameraLabel, expand=False)
                self.movie.pack_start(connectBut, expand=False)
                self.movie.pack_start(gtk.Label(), expand=True) #Empty Space
                vbox2.pack_start(self.movie)
                vbox2.reorder_child(self.movie, 0)
                takeBut.set_sensitive(False)
            else:
                self.pipeline.set_state(gst.STATE_NULL)
                self.xvimagesink.set_xwindow_id(self.movie.window.xid)
                self.pipeline.set_state(gst.STATE_PLAYING)
                takeBut.set_sensitive(True)
            self.win.show_all()

        #Interface
        self.win = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.win.connect("destroy", closedown)
        self.win.set_default_size(900, 600)
        self.win.set_resizable(False)
        self.win.set_title("Photostory")
        if os.path.exists(sys.path[0] + "/photostory.svg"): #For Development
            self.win.set_icon_from_file(sys.path[0] + "/photostory.svg")
        elif os.path.exists("/usr/share/icons/hicolor/scalable/apps/photostory.svg"): #For the packaged program
            self.win.set_icon_from_file("/usr/share/icons/hicolor/scalable/apps/photostory.svg")
        self.movie = gtk.DrawingArea()
        self.movie.set_size_request(320, 240)
        hbox = gtk.HBox(homogeneous=False, spacing=3)
        vbox1 = gtk.VBox(homogeneous=False)
        vbox2 = gtk.VBox(homogeneous = False)   
        filmBut = gtk.Button(label=_("Create Film"))
        filmBut.connect("clicked", movify)
        deleteBut = gtk.Button(label=_("Delete Photo"))
        deleteBut.connect("clicked", deletePic)
#        shareBut = gtk.Button(label="Share Video")
        hbox2 = gtk.HBox(homogeneous=True)
        aboutBut = gtk.Button(label=_("About"))
        aboutBut.connect("clicked", about)

        cal = gtk.Calendar()
        cal.connect("day-selected", chooseDay)
        year, month, day = self.todayDateTuple = cal.get_date()
        self.dateString = '{0:04d}-{1:02d}-{2:02d}'.format(year, month+1, day)
        self.todayDate = self.dateString
        takeBut = gtk.Button(label=_("Take today's photo"))
        takeBut.connect("clicked", capture)
        setPic(self.todayDate)

        self.win.add(hbox)
        hbox.pack_start(vbox1, expand=False)
        hbox2.pack_start(filmBut, expand=False)
        hbox2.pack_start(deleteBut, expand=False)
#        hbox2.pack_start(shareBut)
        hbox2.pack_start(aboutBut)
        vbox2.pack_start(self.movie)
        vbox2.pack_start(cal, expand=False, padding=25)
        vbox2.pack_start(takeBut, expand=False)
        hbox.pack_start(vbox2)
        self.win.show_all()
        connectCamera(None)

start=Main()
gtk.main()
